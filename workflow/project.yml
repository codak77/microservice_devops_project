# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: microservice application

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  push_to_Docker_Hub:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # build docker image and push to docker hub
    # only if the app build and test successfully

    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

# cart image build
      - name: Build and push carts image
        uses: docker/build-push-action@v2
        with:
          context: ./carts/docker/carts
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/microservice:latest

# catalogues build
      - name: Build and push catalogue image
        uses: docker/build-push-action@v2
        with:
          context: ./catalogue/docker/catalogue
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/catalogue:latest
          
# payment image
      - name: Build and push payment image
        uses: docker/build-push-action@v2
        with:
          dockerfile: go/src/github.com/microservices-demo/payment/docker/payment/Dockerfile-release
          path: go/src/github.com/microservices-demo/payment/docker/payment
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/payment:latest
# catalogue db image       
      - name: Build and push catalogue-db image
        uses: docker/build-push-action@v2
        with:
          context: ./catalogue/docker/catalogue-db
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/catalogue-db:latest
          
# front-end image       
      - name: Build and push frontend
        uses: docker/build-push-action@v2
        with:
          context: ./front-end
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/front-end:latest
          
 # orders image       
      - name: Build and push orders
        uses: docker/build-push-action@v2
        with:
          context: ./orders/docker/orders
          file: Dockerfile.github
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/order:latest         

 # queue-master image       
      - name: Build and push queue-master
        uses: docker/build-push-action@v2
        with:
          context: ./queue-master/docker
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/queue-image:latest

# shipping image       
      - name: Build and push shipping
        uses: docker/build-push-action@v2
        with:
          context: ./shipping/docker/shipping
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/shipping:latest

# user image       
      - name: Build and push user
        uses: docker/build-push-action@v2
        with:
          context: ./user/docker/user
          file: Dockerfile-release
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/user:latest

# user db image       
      - name: Build and push user-db
        uses: docker/build-push-action@v2
        with:
          context: ./user/docker/user-db
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/user-db:latest
#   deploy:
#     name: Deploy to EC2
#     runs-on: ubuntu-latest
    
#     needs: [push_to_Docker_Hub]
  
#     steps:
#     - name: executing remote ssh commands using ssh key
#       uses: appleboy/ssh-action@master
#       with:
#         host: ${{ secrets.SSH_HOST }} 
#         username: ${{ secrets.SSH_USERNAME }}
#         key: ${{ secrets.SSH_KEY }}
#         script: |
#           whoami
#           cd /home/ubuntu
#           sudo docker stop backend
#           sudo docker rm  backend
#           sudo docker rmi -f ${{ secrets.DOCKER_USERNAME }}/soberpal.backend:latest 
#           sudo docker pull ${{ secrets.DOCKER_USERNAME }}/soberpal.backend:latest
#           sudo docker run -d -p 8000:8000 --name backend ${{ secrets.DOCKER_USERNAME }}/soberpal.backend:latest
#           sudo docker system prune -af
#           sudo docker builder prune -af
